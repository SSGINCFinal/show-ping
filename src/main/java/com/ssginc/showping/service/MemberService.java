package com.ssginc.showping.service;

import com.ssginc.showping.dto.object.MemberDTO;
import com.ssginc.showping.entity.Member;
import com.ssginc.showping.entity.MemberRole;
import com.ssginc.showping.jwt.JwtUtil;
import com.ssginc.showping.repository.MemberRepository;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationTrustResolverImpl;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.Map;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class MemberService {
    private final MemberRepository memberRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;
    private final AuthenticationManager authenticationManager;
    private final RefreshTokenService refreshTokenService;

    /**
     * ‚úÖ Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Î©îÏÑúÎìú (Ïª®Ìä∏Î°§Îü¨ÏóêÏÑú Ìò∏Ï∂ú)
     */
    public ResponseEntity<?> login(Member member, HttpServletResponse response) {
        System.out.println("üì¢ Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠: " + member.getMemberId());

        String memberId = member.getMemberId();
        String memberPassword = member.getMemberPassword();
        Authentication authentication;

        // Ïù∏Ï¶ù ÏãúÎèÑ
        try {
            authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(memberId, memberPassword));
        } catch (BadCredentialsException e) {
            System.out.println("‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ÏûòÎ™ªÎêú ID ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§."));
        }

        // ‚úÖ SecurityContextÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû• (Ï§ëÏöî)
        SecurityContextHolder.getContext().setAuthentication(authentication);
        System.out.println("‚úÖ SecurityContextÏóê ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï ÏôÑÎ£å: " + authentication.getName());

        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
        if (userDetails == null) {
            System.out.println("‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÜÏùå");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));
        }

        // Ïó≠Ìï†(Role) Í∞ÄÏ†∏Ïò§Í∏∞
        String role = userDetails.getAuthorities().isEmpty() ? "ROLE_USER" : userDetails.getAuthorities().iterator().next().getAuthority();

        // ‚úÖ JWT ÌÜ†ÌÅ∞ ÏÉùÏÑ±
        String accessToken = jwtUtil.generateAccessToken(userDetails.getUsername(), role);
        String refreshToken = jwtUtil.generateRefreshToken(userDetails.getUsername());

        System.out.println("‚úÖ ÏÉùÏÑ±Îêú JWT Access Token: " + accessToken);
        System.out.println("‚úÖ ÏÉùÏÑ±Îêú JWT Refresh Token: " + refreshToken);

        refreshTokenService.saveRefreshToken(memberId, refreshToken);

        // JSON ÏùëÎãµÏúºÎ°ú Access Token Î∞òÌôò
        return ResponseEntity.ok(Map.of(
                "accessToken", accessToken,
                "refreshToken", refreshToken
        ));
    }


    @Transactional
    public Member registerMember(MemberDTO memberDTO) throws Exception {

        Member member = Member.builder()
                .memberName(memberDTO.getMemberName())
                .memberId(memberDTO.getMemberId())
                .memberEmail(memberDTO.getMemberEmail())
                .memberPassword(passwordEncoder.encode(memberDTO.getMemberPassword()))
                .memberAddress(memberDTO.getMemberAddress())
                .memberPhone(memberDTO.getMemberPhone())
                .memberRole(MemberRole.ROLE_USER)
                .streamKey(UUID.randomUUID().toString())
                .memberPoint(0L)
                .build();

        try {
            return memberRepository.save(member);
        } catch (Exception e) {
            throw new Exception("ÌöåÏõê Îì±Î°ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", e);
        }
    }

    public String authenticate(String memberId, String password, RedirectAttributes redirectAttributes) {
        Member member = memberRepository.findByMemberId(memberId).orElse(null);

        if (member == null || !member.getMemberPassword().equals(password)) {
            System.out.println("Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏ Ïò§Î•ò");
            redirectAttributes.addFlashAttribute("message", "ÏïÑÏù¥Îîî ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.");
            return "redirect:/login";  // Î°úÍ∑∏Ïù∏ Ïã§Ìå® Ïãú Îã§Ïãú Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        }

        String role = member.getMemberRole().name();
        String token = jwtUtil.generateAccessToken(memberId, role);

        System.out.println("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ! ÌÜ†ÌÅ∞: " + token);
        redirectAttributes.addFlashAttribute("message", "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ!");
        redirectAttributes.addFlashAttribute("token", token);

        return "redirect:/login";  // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ ÌõÑ Î¶¨Îã§Ïù¥Î†âÌä∏
    }


    public void logout(String username, HttpServletResponse response) {
        // Refresh Token ÏÇ≠Ï†ú
        refreshTokenService.deleteRefreshToken(username);

        // JWT Access Token ÏÇ≠Ï†ú (Ïø†ÌÇ§ Ï†úÍ±∞)
        response.setHeader("Set-Cookie", "accessToken=; HttpOnly; Secure; Path=/; Max-Age=0");
        response.setHeader("Set-Cookie", "refreshToken=; HttpOnly; Secure; Path=/; Max-Age=0");

        System.out.println("‚úÖ Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å: JWT Ïø†ÌÇ§ Î∞è Refresh Token ÏÇ≠Ï†úÎê®");
    }

    public boolean isDuplicateId(String memberId) {
        // memberIdÎ°ú ÌöåÏõêÏùÑ Ï°∞ÌöåÌïòÍ≥†, Í≤∞Í≥ºÍ∞Ä ÏûàÏúºÎ©¥ Ï§ëÎ≥µÎêú IDÎùºÎäî ÏùòÎØ∏
        return memberRepository.existsByMemberId(memberId);
    }

    public Member findMemberById(String memberId) {
        return memberRepository.findByMemberId(memberId)
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + memberId));
    }


}